name: Envoyer la Newsletter et Déployer le Site

on:
  push:
    branches:
      - main
    paths:
      - '_posts/**.md'
  workflow_dispatch:

permissions:
  contents: read
  pages: write
  id-token: write

jobs:
  # TÂCHE 1 : PRÉPARER L'E-MAIL ET LANCER LE TEST
  prepare_and_test_email:
    name: 1. Préparer et Tester l'E-mail (Mailchimp)
    runs-on: ubuntu-latest
    outputs:
      campaign_id: ${{ steps.create_campaign.outputs.campaign_id }}
      skipped: ${{ steps.create_campaign.outputs.skipped }}
    steps:
      - name: Checkout repository
        uses: actions/checkout@v3
        with:
          fetch-depth: 0

      - name: Set up Python
        uses: actions/setup-python@v4
        with:
          python-version: '3.x'

      - name: Install dependencies
        run: |
          python -m pip install --upgrade pip
          pip install requests markdown beautifulsoup4

      - name: Create Campaign and Add Content
        id: create_campaign
        env:
          MAILCHIMP_API_KEY: ${{ secrets.MAILCHIMP_API_KEY }}
          MAILCHIMP_AUDIENCE_ID: ${{ secrets.MAILCHIMP_AUDIENCE_ID }}
          MAILCHIMP_SERVER_PREFIX: ${{ secrets.MAILCHIMP_SERVER_PREFIX }}
          MAILCHIMP_TEMPLATE_ID: ${{ secrets.MAILCHIMP_TEMPLATE_ID }}
          MAILCHIMP_FROM_NAME: ${{ secrets.MAILCHIMP_FROM_NAME }}
          MAILCHIMP_REPLY_TO_EMAIL: ${{ secrets.MAILCHIMP_REPLY_TO_EMAIL }}
          BEFORE_SHA: ${{ github.event.before }}
          AFTER_SHA: ${{ github.event.after }}
        run: |
          python -c "
          import os, sys, requests, json, markdown, subprocess
          from bs4 import BeautifulSoup

          newsletter_file = None
          try:
              before_sha = os.environ.get('BEFORE_SHA')
              after_sha = os.environ.get('AFTER_SHA')
              git_command = f'git diff --name-only {before_sha} {after_sha} | grep \"_posts/.*\\.md$\"'
              result = subprocess.run(git_command, shell=True, check=True, capture_output=True, text=True)
              newsletter_file = result.stdout.strip().split('\n')[0]
          except (subprocess.CalledProcessError, IndexError):
              pass
          
          if not newsletter_file:
              print('Aucun fichier .md trouvé dans le dossier /_posts pour ce commit. Annulation du workflow.')
              print(f'::set-output name=skipped::true')
              sys.exit(0)

          print(f'Fichier de newsletter trouvé : {newsletter_file}')
          print(f'::set-output name=skipped::false')

          API_KEY = os.environ.get('MAILCHIMP_API_KEY')
          AUDIENCE_ID = os.environ.get('MAILCHIMP_AUDIENCE_ID')
          SERVER_PREFIX = os.environ.get('MAILCHIMP_SERVER_PREFIX')
          TEMPLATE_ID = int(os.environ.get('MAILCHIMP_TEMPLATE_ID'))
          MC_EDIT_REGION_NAME = 'main_content'
          API_URL = f'https://{SERVER_PREFIX}.api.mailchimp.com/3.0/'
          HEADERS = {'Authorization': f'Bearer {API_KEY}'}
          from_name = os.environ.get('MAILCHIMP_FROM_NAME')
          reply_to_email = os.environ.get('MAILCHIMP_REPLY_TO_EMAIL')

          # --- DÉBUT DES LIGNES DE DÉBOGAGE ---
          print('--- DEBUG: Contenu brut du secret MAILERCHIMP_FROM_NAME ---')
          print(repr(from_name))
          # --- FIN DES LIGNES DE DÉBOGAGE --
          
          with open(newsletter_file, 'r', encoding='utf-8') as f:
              content_lines = f.readlines()
              markdown_content = ''
              in_front_matter = False
              if content_lines and content_lines[0].strip() == '---':
                  in_front_matter = True
                  content_lines.pop(0)
              for line in content_lines:
                  if in_front_matter and line.strip() == '---':
                      in_front_matter = False
                      continue
                  if not in_front_matter:
                      markdown_content += line
              html_content = markdown.markdown(markdown_content)

          soup = BeautifulSoup(html_content, 'html.parser')
          email_subject = soup.find('h1').text if soup.find('h1') else 'Ma Nouvelle Newsletter'
          print(f'Sujet de l\'email détecté : {email_subject}')

          campaign_data = {'type': 'regular', 'recipients': {'list_id': AUDIENCE_ID}, 'settings': {'subject_line': email_subject, 'from_name': from_name, 'reply_to': reply_to_email, 'template_id': TEMPLATE_ID}}
          try:
              r = requests.post(f'{API_URL}/campaigns', headers=HEADERS, json=campaign_data)
              r.raise_for_status()
              campaign_id = r.json()['id']
              print(f'Campagne créée avec succès. ID : {campaign_id}')
              print(f'::set-output name=campaign_id::{campaign_id}')
          except Exception as e:
              print(f'Erreur lors de la création de la campagne: {e}'); sys.exit(1)
          
          content_data = {'template': {'id': TEMPLATE_ID, 'sections': {MC_EDIT_REGION_NAME: html_content}}}
          try:
              requests.put(f'{API_URL}/campaigns/{campaign_id}/content', headers=HEADERS, json=content_data).raise_for_status()
              print('Contenu injecté dans le template avec succès.')
          except Exception as e:
              print(f'Erreur lors de l\'injection du contenu: {e}'); sys.exit(1)
          "

      - name: Send Test Email
        if: steps.create_campaign.outputs.skipped != 'true'
        env:
          MAILCHIMP_API_KEY: ${{ secrets.MAILCHIMP_API_KEY }}
          MAILCHIMP_SERVER_PREFIX: ${{ secrets.MAILCHIMP_SERVER_PREFIX }}
          MAILCHIMP_TEST_EMAIL: ${{ secrets.MAILCHIMP_TEST_EMAIL }}
          CAMPAIGN_ID: ${{ steps.create_campaign.outputs.campaign_id }}
        run: |
          python -c "
          import os, requests, json, sys

          API_KEY = os.environ.get('MAILCHIMP_API_KEY')
          SERVER_PREFIX = os.environ.get('MAILCHIMP_SERVER_PREFIX')
          CAMPAIGN_ID = os.environ.get('CAMPAIGN_ID')
          test_emails_str = os.environ.get('MAILCHIMP_TEST_EMAIL')

          # --- DÉBUT DES LOGS DE DÉBOGAGE ---
          print('--- DEBUG: Contenu brut du secret MAILERCHIMP_TEST_EMAIL ---')
          print(repr(test_emails_str)) # repr() va montrer les caractères cachés comme '\n'
          
          # On nettoie la chaîne d'e-mails pour être plus robuste
          test_emails_list = [email.strip() for email in test_emails_str.split(',') if email.strip()]
          
          print('--- DEBUG: Liste des e-mails après nettoyage et split ---')
          print(test_emails_list)
          # --- FIN DES LOGS DE DÉBOGAGE ---

          API_URL = f'https://{SERVER_PREFIX}.api.mailchimp.com/3.0/'
          HEADERS = {'Authorization': f'Bearer {API_KEY}', 'Content-Type': 'application/json'}
          
          test_data = {
              'test_emails': test_emails_list,
              'send_type': 'html'
          }

          # --- LOG FINAL AVANT ENVOI ---
          print('--- DEBUG: Données JSON envoyées à Mailchimp ---')
          print(json.dumps(test_data, indent=2))
          
          try:
              requests.post(f'{API_URL}/campaigns/{CAMPAIGN_ID}/actions/test', headers=HEADERS, json=test_data).raise_for_status()
              print(f'Email de test envoyé avec succès à : {test_emails_list}')
          except Exception as e:
              # Affiche la réponse complète de l'API en cas d'erreur
              if hasattr(e, 'response') and e.response is not None:
                  print('--- ERREUR DÉTAILLÉE DE L\'API MAILCHIMP ---')
                  print(e.response.text)
              print(f'Erreur lors de l\'envoi du test : {e}'); sys.exit(1)
          "

  # TÂCHE 2 : APPROBATION ET ENVOI FINAL DE L'E-MAIL
  send_final_email:
    name: 2. Approbation et Envoi Final (Mailchimp)
    needs: prepare_and_test_email
    if: needs.prepare_and_test_email.outputs.skipped != 'true'
    environment: Production
    runs-on: ubuntu-latest
    steps:
      - name: Send Final Campaign
        env:
          MAILCHIMP_API_KEY: ${{ secrets.MAILCHIMP_API_KEY }}
          MAILCHIMP_SERVER_PREFIX: ${{ secrets.MAILCHIMP_SERVER_PREFIX }}
          CAMPAIGN_ID: ${{ needs.prepare_and_test_email.outputs.campaign_id }}
        run: |
          python -c "
          import os, requests, sys
          API_KEY = os.environ.get('MAILCHIMP_API_KEY')
          SERVER_PREFIX = os.environ.get('MAILCHIMP_SERVER_PREFIX')
          CAMPAIGN_ID = os.environ.get('CAMPAIGN_ID')
          API_URL = f'https://{SERVER_PREFIX}.api.mailchimp.com/3.0/'
          HEADERS = {'Authorization': f'Bearer {API_KEY}'}
          try:
              requests.post(f'{API_URL}/campaigns/{CAMPAIGN_ID}/actions/send', headers=HEADERS).raise_for_status()
              print('Approbation reçue ! La campagne est en cours d\'envoi final.')
          except Exception as e:
              print(f'Erreur lors de l\'envoi final : {e}'); sys.exit(1)
          "

      - name: Cleanup Campaign on Rejection
        if: cancelled()
        env:
          MAILCHIMP_API_KEY: ${{ secrets.MAILCHIMP_API_KEY }}
          MAILCHIMP_SERVER_PREFIX: ${{ secrets.MAILCHIMP_SERVER_PREFIX }}
          CAMPAIGN_ID: ${{ needs.prepare_and_test_email.outputs.campaign_id }}
        run: |
          python -c "
          import os, requests
          API_KEY = os.environ.get('MAILCHIMP_API_KEY')
          SERVER_PREFIX = os.environ.get('MAILCHIMP_SERVER_PREFIX')
          CAMPAIGN_ID = os.environ.get('CAMPAIGN_ID')
          API_URL = f'https://{SERVER_PREFIX}.api.mailchimp.com/3.0/'
          HEADERS = {'Authorization': f'Bearer {API_KEY}'}
          print(f'Le déploiement a été rejeté. Suppression de la campagne brouillon ID : {CAMPAIGN_ID}')
          try:
              requests.delete(f'{API_URL}/campaigns/{CAMPAIGN_ID}', headers=HEADERS).raise_for_status()
              print('Campagne brouillon supprimée avec succès de Mailchimp.')
          except Exception as e:
              print(f'Erreur lors de la suppression de la campagne brouillon : {e}')
          "

  # TÂCHE 3 : CONSTRUIRE LE SITE WEB STATIQUE
  build_site:
    name: 3. Construire le Site (GitHub Pages)
    needs: send_final_email
    runs-on: ubuntu-latest
    steps:
      - name: Checkout repository
        uses: actions/checkout@v3
      - name: Setup GitHub Pages
        uses: actions/configure-pages@v5
      - name: Build with Jekyll
        uses: actions/jekyll-build-pages@v1
        with:
          source: ./
          destination: ./_site
      - name: Upload artifact
        uses: actions/upload-pages-artifact@v3

  # TÂCHE 4 : DÉPLOYER LE SITE WEB STATIQUE
  deploy_site:
    name: 4. Déployer le Site (GitHub Pages)
    needs: build_site
    runs-on: ubuntu-latest
    environment:
      name: github-pages
      url: ${{ steps.deployment.outputs.page_url }}
    steps:
      - name: Deploy to GitHub Pages
        id: deployment
        uses: actions/deploy-pages@v4

  # TÂCHE 5 : DÉPLOIEMENT SUR OVH (APRÈS GITHUB PAGES)
  deploy_to_ovh:
    name: 5. Répliquer sur OVH (SSH)
    # Ne démarre qu'après le succès du déploiement sur GitHub Pages
    needs: deploy_site
    runs-on: ubuntu-latest
    steps:
      - name: Download artifact
        # On télécharge l'artefact "github-pages" créé à l'étape 3
        uses: actions/download-artifact@v4
        with:
          name: github-pages

      - name: Deploy to Server via Rsync
        uses: easingthemes/ssh-deploy@v5.0.0
        with:
          SSH_PRIVATE_KEY: ${{ secrets.SSH_PRIVATE_KEY }}
          REMOTE_HOST: ${{ secrets.SSH_HOST }}
          REMOTE_USER: ${{ secrets.SSH_USER }}
          SOURCE: "./" # Le contenu est à la racine de l'artefact téléchargé
          TARGET: ${{ secrets.REMOTE_PATH }}
                    # --- LA CORRECTION EST ICI ---
          # On désactive la vérification stricte de la clé de l'hôte
          # pour éviter que la connexion ne se bloque en attendant une validation.
          SSH_STRICT_HOST_KEY_CHECKING: 'no'
          EXCLUDE: "/.git/, /.github/"
